// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        Int   @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Game {
  id Int @id @default(autoincrement())
  playerOne  String
  playerTwo String?
  playerThree String?
  playerFour String?
  playerFive String?
  gameState String?
  winner String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  diceRolls Dice[]
  scoreCards ScoreCard[]
}

model ScoreCard {
    id        Int   @id @default(autoincrement())
    gameId Int
    game Game @relation(fields: [gameId], references: [id])
    player String
    scoreCardEntries ScoreCardEntry[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([gameId])
}

model ScoreCardEntry {
    id        Int   @id @default(autoincrement())
    scoreCardId Int
    redRow Int
    blueRow Int
    yellowRow Int
    greenRow Int
    penaltyOne Int
    penaltyTwo Int
    penaltyThree Int
    penaltyFour Int
    scoreCard ScoreCard @relation(fields: [scoreCardId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([scoreCardId])
}

model Dice {
    id        Int   @id @default(autoincrement())
    gameId Int
    whiteOne Int
    whiteTwo Int
    green Int
    red Int
    yellow Int
    blue Int
    game Game @relation(fields: [gameId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([gameId])
}